"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"Indicates what fields are available at the top level of a query operation."
type Query {
    users( name: String @where(operator: "like") ): [User!]! @guard(with: ["api"]) @paginate(defaultCount: 10)
    user(
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    departments: [Department!]!  @paginate(defaultCount: 30)
    department(id: ID! @eq): Department! @find

    employees(department_id: ID @eq): [Employee!]! @paginate(defaultCount: 10)
    employee(id: ID! @eq): Employee! @find
}

"Account of a person who utilizes this application."
type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
}

type Department {
    id: ID!
    name: String!
    employees: [Employee] @hasMany(type: PAGINATOR, defaultCount: 10)
    created_at: DateTime!
    updated_at: DateTime!
}

type Employee {
    id: ID!
    name: String!
    email: String!
    salary: Int!
    position: String!
    phone: String
    email: String
    address: String
    photo: String
    joined_at: DateTime
    is_active: Boolean
    department_id: ID!
    department: Department @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}

type Mutation {

    createDepartment(
      name: String @rules(apply: ["required", "unique:departments,name"])
    ): Department @create @guard(with: ["api"])

    updateDepartment(
      id: ID!
      name: String @rules(apply: ["required", "unique:departments,name"])
    ): Department @update @guard(with: ["api"])

    deleteDepartment(
      id: ID!
    ): Department @delete @guard(with: ["api"])

    createEmployee(
      name: String!
      email: String!
      salary: Int!
      position: String!
      phone: String
      email: String
      address: String
      photo: String
      joined_at: DateTime
      is_active: Boolean
      department_id: ID!
    ): Employee @create @guard(with: ["api"])

    updateEmployee(
      id: ID!
      name: String!
      email: String!
      salary: Int!
      position: String!
      phone: String
      email: String
      address: String
      photo: String
      joined_at: DateTime
      is_active: Boolean
      department_id: ID!
    ): Employee @update @guard(with: ["api"])

    deleteEmployee(
      id: ID!
    ): Employee @delete @guard(with: ["api"])
}